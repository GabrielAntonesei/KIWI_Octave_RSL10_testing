
// File generated by noodle version O-2018.09#c3302020d9#181023, Tue Dec 18 09:47:44 2018
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// C:\Synopsys\ASIP Programmer\O-2018.09-SP1\win64\bin\WINbin\noodle.exe -B -IC:/Synopsys/lpdsp32-v3_vO-2018.09_windows/lpdsp32-v3_vO-2018.09/lib -IC:/Synopsys/lpdsp32-v3_vO-2018.09_windows/lpdsp32-v3_vO-2018.09/lib/isg -IC:/Synopsys/lpdsp32-v3_vO-2018.09_windows/lpdsp32-v3_vO-2018.09/lib/runtime/include -D__tct_patch__=100 -ilpdsp32_chess.h +wRelease/chesswork main.c lpdsp32

toolrelease _18R3;

prop static_variable_registers = ( IMSK irq_stat );

// float64 int32_to_float64(int)
F__ulonglong_int32_to_float64___sint : user_defined, called {
    fnm : "int32_to_float64" 'float64 int32_to_float64(int)'; 
    arg : ( dmaddr_:i int64_:r int32_:i );
    loc : ( LR[0] AX[0] RA[0] );
    vac : ( srIM[0] );
    llv : 0 0 0 0 0 ;
}

// int float64_to_int32_round_to_zero(float64)
F__sint_float64_to_int32_round_to_zero___ulonglong : user_defined, called {
    fnm : "float64_to_int32_round_to_zero" 'int float64_to_int32_round_to_zero(float64)'; 
    arg : ( dmaddr_:i int32_:r int64_:i );
    loc : ( LR[0] RA[0] AX[0] );
    vac : ( srIM[0] );
    llv : 0 0 0 0 0 ;
}

// inline assembly void enable_interrupts()
Fvoid_enable_interrupts : user_defined, volatile, assembly {
    fnm : "enable_interrupts" 'inline assembly void enable_interrupts()'; 
    flc : ( A[0] A[1] A[2] A[3] A[4] A[5] A[6] A[7] Ae[0] Ae[1] Ah[0] Ah[1] Al[0] Al[1] Be[0] Be[1] Bh[0] Bh[1] Bl[0] Bl[1] C[0] C[1] C[2] C[3] LB[0] LB[1] LR[0] LSZ[0] LSZ[1] RA[0] RA[1] RB[0] RB[1] );
    vac : ( srIM[0] );
    llv : 0 0 0 0 0 ;
}

// inline assembly void core_halt()
Fvoid_core_halt : user_defined, volatile, assembly {
    fnm : "core_halt" 'inline assembly void core_halt()'; 
    flc : ( A[0] A[1] A[2] A[3] A[4] A[5] A[6] A[7] Ae[0] Ae[1] Ah[0] Ah[1] Al[0] Al[1] Be[0] Be[1] Bh[0] Bh[1] Bl[0] Bl[1] C[0] C[1] C[2] C[3] LB[0] LB[1] LR[0] LSZ[0] LSZ[1] RA[0] RA[1] RB[0] RB[1] );
    vac : ( srIM[0] );
    llv : 0 0 0 0 0 ;
}

// double ff_sqrt(double)
Fff_sqrt : user_defined, called {
    fnm : "ff_sqrt" 'double ff_sqrt(double)'; 
    arg : ( dmaddr_:i int64_:r int64_:i );
    loc : ( LR[0] AX[0] AX[1] );
    vac : ( srIM[0] );
    llv : 0 1 0 0 0 ;
}

// void isr0()
Fisr0 : user_defined, isr, called {
    fnm : "isr0" 'void isr0()'; 
    flc : ( A[0] A[1] A[2] A[3] A[4] A[5] A[6] A[7] Ae[0] Ae[1] Ah[0] Ah[1] Al[0] Al[1] Be[0] Be[1] Bh[0] Bh[1] Bl[0] Bl[1] C[0] C[1] C[2] C[3] LB[0] LB[1] LR[0] LSZ[0] LSZ[1] RA[0] RA[1] RB[0] RB[1] srFlags[0] );
    svd : ( srIM[0] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// uint32_t fibonacci(uint32_t)
F__uint_fibonacci___uint : user_defined, called {
    fnm : "fibonacci" 'uint32_t fibonacci(uint32_t)'; 
    arg : ( dmaddr_:i int32_:r int32_:i );
    loc : ( LR[0] RA[0] RA[1] );
    vac : ( srIM[0] );
    frm : ( );
    llv : 0 1 0 0 0 ;
}

// int main()
F_main : user_defined, called {
    fnm : "main" 'int main()'; 
    arg : ( dmaddr_:i int32_:r );
    loc : ( LR[0] RA[0] );
    vac : ( srIM[0] );
    frm : ( );
    llv : 0 1 0 0 0 ;
}

