
// File generated by darts version O-2018.09#c3302020d9#181023, Tue Dec 18 09:47:46 2018
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// C:\Synopsys\ASIP Programmer\O-2018.09-SP1\win64\bin\WINbin\darts.exe -B -IC:/Synopsys/lpdsp32-v3_vO-2018.09_windows/lpdsp32-v3_vO-2018.09/lib +p -d -IC:/Synopsys/lpdsp32-v3_vO-2018.09_windows/lpdsp32-v3_vO-2018.09/lib/runtime/include -D__tct_patch__=100 Release/main.o lpdsp32

// Release: ipp O-2018.09-SP1
.data_segment_name
.bss local .at 12582916 __main_CssCmdGen DMIO 1

.data_segment_name
.bss local 4 __main_actionRequired DMA 4

.undef local data __main_actionRequired

.undef local data __main_actionRequired

.undef local data __main_CssCmdGen

.data_segment_name
.bss global .at 8192 sharedMemory DMA 16


.data_segment_name
.bss global .at 8388608 sharedInputMemory DMB 4096


.data_segment_name
.bss global .at 8392704 sharedOutputMemory DMB 4096


.data_segment_name
.bss global 4 index_fib DMA 4

.data_segment_name
.data global 4 temp DMA
	0x0
	0x0
	0x0
	0x0

.data_segment_name
.data global 4 idx DMA
	0x0
	0x0
	0x0
	0x0


.text_segment_name
.text global 2 isr0
	/*      0 "10101011111111110000" */    sp+= -8
	/*      1 "01011100000000000110" */    ra1 = 1; sp[0] = ra1
	/*      2 "10001000000001001001" */    /* MW */
	/*      3 "01101100000000000000" */    [__main_actionRequired] = ra1
	/*      4 "00000000000001001001" */    /* MW */
	/*      5 "10111010000101101000" */    retidb
	/*      6 "10001000000000001001" */    ra1 = sp[0]
.label isr0__end
	/*      7 "10101000000000010000" */    sp+= 8

.text_segment_name
.text global 2 __uint_fibonacci___uint
	/*      0 "00111000000110000000" */    ax0 = 48
	/*      1 "00110000100000101000" */    cmpu(ra1,ax0)
	/*      2 "10111100000100101011" */    if (ns) jpsdb 18
	/*      3 "00111000011111111100" */    ra0 = -1
	/*      4 "00110010100000101000" */    cmpu(ra1,0)
	/*      5 "10111100000011100000" */    if (z) jps 14
	/*      6 "00110010100001101000" */    cmpu(ra1,1)
	/*      7 "10111100000011000000" */    if (z) jps 12
	/*      8 "00110010100001101000" */    cmpu(ra1,1)
	/*      9 "10111100000010111101" */    if (np) jpsdb 11
	/*     10 "01010101001111110110" */    ra1 = ra1 + -1; ra0 = zero
	/*     11 "10011000111010001000" */    /* MW */
	/*     12 "10011000001001000000" */    axs0 = ra1
	/*     13 "01100010000000000000" */    lp [axs0] 2
	/*     14 "00000000000000100000" */    /* MW */
	/*     15 "00000000000000000000" */    nop
	/*     16 "00000000000000000000" */    nop
	/*     17 "00101000000100101100" */    ra0 = ra1 + ra0
	/*     18 "00101010011111101101" */    ra1 = ra1 + -1
	/*     19 "10111010000101000000" */    ret
	/*     20 "10011000001001001000" */    ra0 = ra1
.label __uint_fibonacci___uint__end
	/*     21 "10111010000101000000" */    ret

.text_segment_name
.text global 2 _main
	/*      0 "10101011111111010000" */    sp+= -24
	/*      1 "01101100000000000000" */    [__main_actionRequired] = zero
	/*      2 "00000000000001111010" */    /* MW */
	/*      3 "10111010000100010000" */    ie = 1
	/*      4 "00000000000000000000" */    nop
	/*      5 "10110001111101000100" */    ra0 = 1000
	/*      6 "00110110100100000000" */    ax0 = |ra0|
	/*      7 "10010000000001011000" */    sp[0] = ahl0
	/*      8 "01000000000000000000" */    nop; sp[8] = ae0
	/*      9 "00001000000101010100" */    /* MW */
	/*     10 "01000110000011100000" */    powerdown; nop
	/*     11 "00111000000000000000" */    /* MW */
	/*     12 "01101100000000000000" */    ra0 = [__main_actionRequired]
	/*     13 "00000000000000001000" */    /* MW */
	/*     14 "00110010000001100000" */    cmp(ra0,1)
	/*     15 "10111111111110100001" */    if (nz) jps -6
	/*     16 "01101110000000000001" */    axl0 = [8192]
	/*     17 "00000000000000010000" */    /* MW */
	/*     18 "01000000000000000000" */    nop; ra1 = al0
	/*     19 "00011000001100001001" */    /* MW */
	/*     20 "01101100000000000000" */    [__main_actionRequired] = zero
	/*     21 "00000000000001111010" */    /* MW */
	/*     22 "01101100000000000000" */    [index_fib] = ra1
	/*     23 "00000000000001001001" */    /* MW */
	/*     24 "01100110000000000000" */    call __uint_fibonacci___uint
	/*     25 "00000000000000000000" */    /* MW */
	/*     26 "01011100000010000000" */    ax0 = 32; ra1 = 1000
	/*     27 "00110001111101000101" */    /* MW */
	/*     28 "01101000000000000000" */    a1 = 8192
	/*     29 "10000000000000100001" */    /* MW */
	/*     30 "01010000110000010000" */    ax0 = lsr(ra0,ax0); ra0 = zero
	/*     31 "00011000111010001000" */    /* MW */
	/*     32 "01101000001000000000" */    a0 = -8384512
	/*     33 "01000000000000100000" */    /* MW */
	/*     34 "01011100010000000000" */    ax0 = 0L; a1[8] = ahl0
	/*     35 "00001100100101111000" */    /* MW */
	/*     36 "01110110000000000000" */    a0 = a0 + 4040
	/*     37 "00000111111001000000" */    /* MW */
	/*     38 "01101100010000000000" */    [8392704] = zero
	/*     39 "10000000000001111010" */    /* MW */
	/*     40 "01101000001000000000" */    a1 = -8388608
	/*     41 "00000000000000100001" */    /* MW */
	/*     42 "10110000000000000110" */    rb0 = 0
	/*     43 "00100011000010110001" */    ax1 = lsl(rb0,2)
	/*     44 "01010101000000111011" */    rb0 = rb0 + 1; c0 = axs1
	/*     45 "00011000000001101000" */    /* MW */
	/*     46 "01011000010010111000" */    cmpu(rb0,ra1); a2 = a1+c0
	/*     47 "00011100100000000010" */    /* MW */
	/*     48 "01000011111111001101" */    if (s) jpsdb -7; axs1 = a2[0]
	/*     49 "00000101000000000001" */    /* MW */
	/*     50 "00101000000000001000" */    ax0 = ax1 + ax0
	/*     51 "01011011010000000001" */    bx0 = |ax0|; bxs1 = 31
	/*     52 "00110000000011111011" */    /* MW */
	/*     53 "01011011100001000011" */    rb0 = nrm(bx0); flags = zero
	/*     54 "00011000111010110101" */    /* MW */
	/*     55 "00101110000110011011" */    bx1 = bx1 - rb0
	/*     56 "01100010000000000000" */    lp [bxs1] 2
	/*     57 "00000000000000100011" */    /* MW */
	/*     58 "10010000000000010001" */    axl1 = sp[0]
	/*     59 "01010000010001101001" */    bx0 = asr(bx0,bx1); ae1 = sp[8]
	/*     60 "00001000000100010101" */    /* MW */
	/*     61 "00101111100001010010" */    bx0 = div(bx0,ax1)
	/*     62 "00101001100000101000" */    ax0 = ra1 ^ ax0
	/*     63 "00110010000000000000" */    cmp(ax0,0)
	/*     64 "10111100000000111011" */    if (ns) jpsdb 3
	/*     65 "01011100100000010000" */    c0 = 4; rb0 = bl0
	/*     66 "00011000001110001010" */    /* MW */
	/*     67 "00110110000110000110" */    rb0 = -rb0
	/*     68 "01011100010000000001" */    bx0 = 0L; [a0+c0] = rb0
	/*     69 "00000000000001001010" */    /* MW */
	/*     70 "01000110000010001000" */    im = 1; axl0 = 0L
	/*     71 "10110100000000000000" */    /* MW */
	/*     72 "00100011000010100011" */    bx1 = lsl(ra0,2)
	/*     73 "01010101000000110010" */    ra0 = ra0 + 1; c1 = bxs1
	/*     74 "00011000000011101001" */    /* MW */
	/*     75 "01011000010010110000" */    cmpu(ra0,ra1); a2 = a1+c1
	/*     76 "00011100100010000010" */    /* MW */
	/*     77 "10000101000000000011" */    bxs1 = a2[0]
	/*     78 "00101110000110011011" */    bx1 = bx1 - rb0
	/*     79 "00110110100011000111" */    rb1 = |bx1|
	/*     80 "00001000111100110000" */    bx1 = rb1*rb1
	/*     81 "01000011111110101101" */    if (s) jpsdb -11; bxs1 = bl1
	/*     82 "00011000001111000011" */    /* MW */
	/*     83 "00010000001100011010" */    ax0 = ax0 + bx1; bx0 = rb1 + bx0
	/*     84 "01011011010001000001" */    bx1 = |bx0|; sp[12] = rb0
	/*     85 "10001000000111001010" */    /* MW */
	/*     86 "01011011100001100011" */    rb0 = nrm(bx1); ra0 = 31
	/*     87 "00110000000011111100" */    /* MW */
	/*     88 "00101110000110100110" */    rb0 = ra0 - rb0
	/*     89 "01100010000000000000" */    lp [rb0] 2
	/*     90 "00000000000000100110" */    /* MW */
	/*     91 "10111010000100000001" */    im = 0
	/*     92 "01010000010011001101" */    bx1 = asr(bx1,rb0); flags = zero
	/*     93 "10011000111010110101" */    /* MW */
	/*     94 "00101111100001011011" */    bx1 = div(bx1,ax1)
	/*     95 "01010100110001010101" */    bx0 = ra1 ^ bx0; sp[16] = bl1
	/*     96 "00001000001001001111" */    /* MW */
	/*     97 "00110010000000010000" */    cmp(bx0,0)
	/*     98 "10111100000000110011" */    if (ns) jps 3
	/*     99 "10001000001000000010" */    bxs0 = sp[16]
	/*    100 "00110110000010000110" */    rb0 = -bx0
	/*    101 "10001000001001001010" */    sp[16] = rb0
	/*    102 "00110110100000000010" */    bx0 = |ax0|
	/*    103 "00110111000010000110" */    rb0 = nrm(bx0)
	/*    104 "00101110000110100100" */    ra0 = ra0 - rb0
	/*    105 "01100010000000000000" */    lp [ra0] 2
	/*    106 "00000000000000100100" */    /* MW */
	/*    107 "10011000111010110101" */    flags = zero
	/*    108 "01010000010010001001" */    bx0 = asr(bx0,ra0); bxs1 = sp[16]
	/*    109 "00001000001000000011" */    /* MW */
	/*    110 "00101111100001010010" */    bx0 = div(bx0,ax1)
	/*    111 "00101001100000101101" */    ra1 = ra1 ^ ax0
	/*    112 "00110010000000101000" */    cmp(ra1,0)
	/*    113 "10111100000000101011" */    if (ns) jpsdb 2
	/*    114 "10011000001110001000" */    ra0 = bl0
	/*    115 "00110110000100000100" */    ra0 = -ra0
	/*    116 "10000000000001010011" */    [a0+c0] = bh1
	/*    117 "10001000001011100000" */    sp[20] = a0
	/*    118 "01100110000000000000" */    call __ulonglong_int32_to_float64___sint
	/*    119 "00000000000000000000" */    /* MW */
	/*    120 "01100110000000000000" */    calldb ff_sqrt
	/*    121 "00000000000000001000" */    /* MW */
	/*    122 "01000000000000000000" */    nop; axl1 = ahl0
	/*    123 "00011001001000000001" */    /* MW */
	/*    124 "01100110000000000000" */    call __sint_float64_to_int32_round_to_zero___ulonglong
	/*    125 "00000000000000000000" */    /* MW */
	/*    126 "01101000001000000000" */    a1 = -8384520
	/*    127 "00111111111000100001" */    /* MW */
	/*    128 "01101100010000000000" */    rb0 = [8392696]
	/*    129 "01111111110000001010" */    /* MW */
	/*    130 "01011100100000010000" */    c0 = 4; ra1 = a1[4]
	/*    131 "00000100100010001001" */    /* MW */
	/*    132 "01011010000000010100" */    cmp(ra1,0L); a0 = sp[20]
	/*    133 "00001000001010100000" */    /* MW */
	/*    134 "10111100000010101000" */    if (z) jpsdb 10
	/*    135 "01000110000010001000" */    im = 1; [a0+c0] = ra0
	/*    136 "10000000000001001000" */    /* MW */
	/*    137 "00110010000001101000" */    cmp(ra1,1)
	/*    138 "10111100000001000001" */    if (nz) jps 4
	/*    139 "01000100000100000000" */    ax0 = ra0*rb0; jpsdb 9
	/*    140 "00111100000010011111" */    /* MW */
	/*    141 "01011100100011010000" */    c1 = 52; ra1 = al0
	/*    142 "10011000001100001001" */    /* MW */
	/*    143 "10111100000001101111" */    jpsdb 6
	/*    144 "00111001000110100001" */    c1 = 52
	/*    145 "00111001000110100001" */    c1 = 52
	/*    146 "10001000001000001000" */    ra0 = sp[16]
	/*    147 "00001000001000000000" */    ax0 = ra0*rb0
	/*    148 "01000000000000000000" */    nop; ra1 = al0
	/*    149 "00011000001100001001" */    /* MW */
	/*    150 "01011100010000000011" */    rb1 = 0L; [a0-c1] = ra1
	/*    151 "10000000001011001001" */    /* MW */
	/*    152 "01101000001000000000" */    a1 = -8388608
	/*    153 "00000000000000100001" */    /* MW */
	/*    154 "01011100010000000001" */    bx0 = 0L; axs1 = sp[12]
	/*    155 "00001000000110000001" */    /* MW */
	/*    156 "01101000001000000000" */    a2 = -8384512
	/*    157 "01000000000000100010" */    /* MW */
	/*    158 "01011100010000000010" */    ra0 = 0L; axs0 = 1000
	/*    159 "00110001111101000000" */    /* MW */
	/*    160 "00100011000010100011" */    bx1 = lsl(ra0,2)
	/*    161 "01010110000000011101" */    bx1 = rb1 + 0L; c1 = bxs1
	/*    162 "10011000000011101001" */    /* MW */
	/*    163 "10011100100010000011" */    a3 = a1+c1
	/*    164 "10000101100000001010" */    rb0 = a3[0]
	/*    165 "00101110000001110110" */    rb0 = rb0 - ax1
	/*    166 "00110000000101110000" */    cmp(rb0,ra1)
	/*    167 "10111100000010011010" */    if (s) jpsdb 9
	/*    168 "01010110000000001011" */    rb0 = bx0 + 0L; a3 = a2+c1
	/*    169 "00011101000010000011" */    /* MW */
	/*    170 "00110010000000011000" */    cmp(bx1,0)
	/*    171 "10111100000001101001" */    if (nz) jpsdb 6
	/*    172 "10000101100001001001" */    a3[0] = ra1
	/*    173 "01000010000000011111" */    jpsdb 3; rb0 = 100
	/*    174 "10110000001100100110" */    /* MW */
	/*    175 "01011100000000000101" */    bx1 = 1; [a0+c0] = ra0
	/*    176 "10000000000001001000" */    /* MW */
	/*    177 "10000101100001111010" */    a3[0] = zero
	/*    178 "00110010000000110000" */    cmp(rb0,0)
	/*    179 "10111100000001001101" */    if (np) jpsdb 4
	/*    180 "01011100010000000001" */    bx0 = 0L; rb1 = zero
	/*    181 "00011000111010001011" */    /* MW */
	/*    182 "01010101001111111001" */    bx0 = rb0 + -1; rb1 = bxs1
	/*    183 "00011000000011001011" */    /* MW */
	/*    184 "00101010000001100100" */    ra0 = ra0 + 1
	/*    185 "00110000100000100000" */    cmpu(ra0,ax0)
	/*    186 "10111111111001010010" */    if (s) jps -27
	/*    187 "01101100000000000000" */    [idx] = ra0
	/*    188 "00000000000001001000" */    /* MW */
	/*    189 "01000110000010000000" */    im = 0; ra1 = 1
	/*    190 "10110000000000001101" */    /* MW */
	/*    191 "10111111010010101111" */    jpsdb -182
.label _main__end last
	/*    192 "01101110011000000000" */    [12582916] = ra1.b
	/*    193 "00000000001001100101" */    /* MW */

.undef global text __uint_fibonacci___uint

.undef global text ff_sqrt

.undef global text __ulonglong_int32_to_float64___sint

.undef global text __sint_float64_to_int32_round_to_zero___ulonglong

.undef global data index_fib

.undef global data sharedMemory


.undef global data sharedOutputMemory


.undef global data idx

.undef global data sharedInputMemory



